# A2A World Platform - CI/CD Pipeline
# Comprehensive automation for testing, building, and deployment

name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  pull_request:
    branches: [main, develop]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  REGISTRY: registry.digitalocean.com/a2aregistry
  IMAGE_TAG: ${{ github.sha }}
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # Code Quality and Security Checks
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Python dependencies
        run: |
          pip install --upgrade pip
          pip install black flake8 bandit safety mypy pytest-cov
          pip install -r requirements.txt

      - name: Black code formatting check
        run: black --check --diff api/ agents/

      - name: Flake8 linting
        run: flake8 api/ agents/ --max-line-length=88 --extend-ignore=E203,W503

      - name: Bandit security scan
        run: bandit -r api/ agents/ -f json -o bandit-report.json

      - name: Safety dependency check
        run: safety check --json --output safety-report.json

      - name: MyPy type checking
        run: mypy api/ agents/ --ignore-missing-imports

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install Node.js dependencies
        run: |
          cd frontend
          npm ci

      - name: ESLint frontend
        run: |
          cd frontend
          npm run lint

      - name: TypeScript check
        run: |
          cd frontend
          npm run type-check

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  # Backend Tests
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgis/postgis:15-3.3
        env:
          POSTGRES_DB: test_a2a_world
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

      nats:
        image: nats:2.10-alpine
        ports:
          - 4222:4222

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio httpx

      - name: Run backend tests
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_a2a_world
          REDIS_URL: redis://localhost:6379
          NATS_URL: nats://localhost:4222
          SECRET_KEY: test-secret-key
          ENVIRONMENT: testing
        run: |
          cd api
          python -m pytest tests/ -v --cov=app --cov-report=xml --cov-report=html

      - name: Run agent tests
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_a2a_world
          REDIS_URL: redis://localhost:6379
          NATS_URL: nats://localhost:4222
        run: |
          cd agents
          python -m pytest tests/ -v --cov=agents --cov-report=xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./api/coverage.xml,./agents/coverage.xml
          fail_ci_if_error: true

  # Frontend Tests
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Run tests
        run: |
          cd frontend
          npm run test -- --coverage --watchAll=false

      - name: Build frontend
        run: |
          cd frontend
          npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: frontend-build
          path: frontend/.next

  # Build and Push Docker Images
  build-images:
    name: Build & Push Images
    runs-on: ubuntu-latest
    needs: [code-quality, backend-tests, frontend-tests]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    strategy:
      matrix:
        component: [api, frontend, agents]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to DigitalOcean Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
          password: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/a2a-world/${{ matrix.component }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: infrastructure/docker/production/Dockerfile.${{ matrix.component }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-images]
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment:
      name: staging
      url: https://staging.a2aworld.ai
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Configure AWS credentials for DO Spaces
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.SPACES_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.SPACES_SECRET_KEY }}
          aws-region: us-east-1

      - name: Deploy to staging servers
        env:
          DO_TOKEN: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          STAGING_HOST: ${{ secrets.STAGING_HOST }}
        run: |
          # Set up SSH
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H $STAGING_HOST >> ~/.ssh/known_hosts
          
          # Deploy using Docker Compose
          scp infrastructure/docker/production/docker-compose.staging.yml deploy@$STAGING_HOST:~/
          ssh deploy@$STAGING_HOST << 'EOF'
            export REGISTRY_URL=${{ env.REGISTRY }}
            export VERSION=develop-${{ github.sha }}
            docker-compose -f docker-compose.staging.yml pull
            docker-compose -f docker-compose.staging.yml up -d
            docker system prune -f
          EOF

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-images]
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment:
      name: production
      url: https://a2aworld.ai
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Configure AWS credentials for DO Spaces
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.SPACES_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.SPACES_SECRET_KEY }}
          aws-region: us-east-1

      - name: Run database migrations
        env:
          DATABASE_URL: ${{ secrets.PROD_DATABASE_URL }}
        run: |
          cd database
          python migrations/migration_manager.py upgrade

      - name: Deploy to production with zero downtime
        env:
          DO_TOKEN: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          PROD_HOSTS: ${{ secrets.PROD_HOSTS }}
        run: |
          # Set up SSH
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          
          # Deploy to each production host with rolling updates
          for host in $(echo $PROD_HOSTS | tr ',' '\n'); do
            ssh-keyscan -H $host >> ~/.ssh/known_hosts
            echo "Deploying to $host"
            
            scp infrastructure/docker/production/docker-compose.production.yml deploy@$host:~/
            ssh deploy@$host << 'EOF'
              export REGISTRY_URL=${{ env.REGISTRY }}
              export VERSION=main-${{ github.sha }}
              
              # Rolling update with zero downtime
              docker stack deploy --compose-file docker-compose.production.yml a2a-world
              
              # Wait for health checks
              sleep 60
              
              # Clean up old images
              docker image prune -f
            EOF
            
            # Health check before next host
            sleep 30
          done

      - name: Notify deployment status
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow